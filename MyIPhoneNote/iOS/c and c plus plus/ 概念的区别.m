1，NUL和NULL的区别
	NUL用于结束一个ACSII字符串，表示ACSII码零。
	NULL用于表示什么也不指向（空指针）。
2，数组和指针的区别
	数组保存数据，直接访问数据，通常用于存储固定数目且数据类型相同的元素。
	指针保存数据地址，间接访问数据，首先取得指针的内容，把它作为地址，然后从这个地址提取数据。通常用于动态数据结构。
2，switch中的break中断了什么。
	break语句事实上跳出的是最近的那层循环语句或switch语句。
3，static在函数内部，表示该变量的值在各个调用间一直保持延续性。
		在函数这一级，表示该函数只对本文件可见。
4，extern用于函数定义，表示全局可见（属于冗余的）。用于变量，表示它在其他地方定义。
5，c语言中的对象必须有且只有一个定义（确定对象的类型，并分配内存），但它可以有多个extern声明（描述对象的类型）。

6,
break和continue的区别如下： 
1. break可用于switch语句，表示跳出整个switch块，而continue则不能用于switch语句 
2. 它们都可用于循环语句的循环体，所谓的区别也应该是它们对循环次数的影响不同。break用于立即退出当前循环，而continue仅跳过当次循环（本次循环体内不执行continue语句后的其它语句，但下次循环还会执行）。举例说明。 
int i; 
int s = 0; 
for (int i = 1; i <= 10; i++) 
{ 
	if (i == 6) break; 
	s += i; 
} 
上面的循环会因为break语句而在i=6时提前终止，这样s的最终值就是1+2+3+4+5 
如将break换成continue 
int i; 
int s = 0; 
for (int i = 1; i <= 10; i++) 
{ 
	if (i == 6) continue; 
	s += i; 
} 
当i=6时就不会将i累加到s中，s的最终值是1+2+3+4+5+7+8+9+10，唯独少一个6


break表示跳出循环，continue表示结束本次循环 
示例程序如下： 

#include "stdio.h"  
void main()  
{  int n,m;  
	for(n=1;n<=10;n++)     ／＊这个循环输出1  2  3  4， 在n是5的时候循环退出＊／ 
	{ if(n==5)  
		break;  
        printf(" %d",n);  
	}  
	printf("\n");  
	for(m=1;m<=10;m++)  ／＊这个循环输出1  2  3  4  6  7  8  9  10 ，＊／ 
	{ if(m==5)        ／＊在m是5的时候没有执行当次循环的其他语句，所以未输出5＊／ 
		continue;  
        printf(" %d",m);  
	}  
	getch();  
}